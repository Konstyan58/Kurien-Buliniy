from aiogram import types, Dispatcher
from config import bot
from keyboards.client_inline import buttons_for_menu
from pprint import pprint
import requests
from settings import API_TOKEN
from utils.text_utils import s


async def send_locate(message: types.Message):
    cntry, ppltn, temp, vlsnst = s(message.location.latitude, message.location.longitude, API_TOKEN)
    latitude = message.location.latitude
    longituide = message.location.longitude
    await bot.send_message(message.from_user.id, f'–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {latitude},{longituide} \n'
                                                 f'–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ (—Ö–æ—Ç—è –µ—Å–ª–∏ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç–æ –∂–∏–≤—ë—Ç–µ –≤ –°–ù–ì, –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ –±–æ—Ç–∞ –Ω–µ –ø–µ—Ä–µ–≤–µ–ª–∏): {cntry} \n'
                                                 f'–í–∞—à–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp} \n'
                                                 f'–í–ª–∞–∂–Ω–æ—Å—Ç—å {vlsnst} \n'
                                                 f'AQI {ppltn}')


async def send_welcome(message: types.Message):
    print(message)
    prinimanie_buttons = buttons_for_menu()
    await bot.send_message(message.from_user.id, '—ä—É—ä', reply_markup=prinimanie_buttons)


async def send_something(callback: types.CallbackQuery):
    print(callback)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
    dp.register_callback_query_handler(send_something, lambda s: s.data == "CLICK_ME")
    dp.register_message_handler(send_locate, content_types=['location'])


# @dp.message_handler(state=UserState.location, content_types=['location'])
# async def handle_location(message: types.Message, state: FSMContext):
#     user_loc1 = message.location.latitude
#     user_loc2 = message.location.longitude
#     data = await state.get_data()
#     org_loc1 = data['id_in_qr'][0]
#     org_loc2 = data['id_in_qr'][1]
#     res = geolocation.ras(user_loc1, user_loc2, org_loc1, org_loc2)
#     if res > 200 or not res:
#         await message.answer('–í—ã –µ—â–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ —Ä–∞–±–æ—Ç—ã', reply_markup=types.ReplyKeyboardRemove())
#         await UserState.location.set()
#     else:
#         await message.answer(f'–í—ã –ø—Ä–∏—à–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ ', reply_markup=types.ReplyKeyboardRemove())
#         await state.finish()
#     for file in glob.glob(f"data/{message.from_user.id}{message.date}.png"):
#         os.remove(file)

"""
1. –ó–∞–≥—É–≥–ª–∏—Ç—å: "–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å keyboard –∫–ø–Ω–æ–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ aiogram python"
2. –ó–∞–≥—É–≥–ª–∏—Ç—å: "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –≤ aiogram python"
3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é" (–∫–∞–∫-—Ç–æ —Ç–∞–∫üòÅ)
4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
5.–∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∏—Ñ–µ
"""
